# This viminfo file was generated by Vim 8.1.
# You may edit it if you're careful!

# Viminfo version
|1,4

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~h
# Last Search Pattern:
~MSle0~/control

# Last Substitute Search Pattern:
~MSle0&chan2

# Last Substitute String:
$chan0

# Command Line History (newest to oldest):
:wq
|2,0,1734844716,,"wq"
:q
|2,0,1734659316,,"q"
:w
|2,0,1734316387,,"w"
:wa
|2,0,1734314657,,"wa"
:q!
|2,0,1734241541,,"q!"
:q~
|2,0,1733721142,,"q~"
:%s/chan2/chan0/g
|2,0,1733706761,,"%s/chan2/chan0/g"
:1~!
|2,0,1733639032,,"1~!"
:%s/sensor_value/sensor_diff/gc
|2,0,1733635518,,"%s/sensor_value/sensor_diff/gc"
:%s/Sensor Value/Sensor Diff/g
|2,0,1733635508,,"%s/Sensor Value/Sensor Diff/g"
:e control_magnet.py
|2,0,1733635226,,"e control_magnet.py"
:vs
|2,0,1733635222,,"vs"
:.!
|2,0,1733597055,,".!"
:%s/2f/3f/g
|2,0,1732914711,,"%s/2f/3f/g"
:'<,'>q
|2,0,1732773415,,"'<,'>q"
:set paste
|2,0,1730527965,,"set paste"
:retab
|2,0,1730527178,,"retab"

# Search String History (newest to oldest):
?/control
|2,1,1734843346,47,"control"
?/pwm_fre
|2,1,1734827441,47,"pwm_fre"
?/cycl
|2,1,1734827103,47,"cycl"
?/target
|2,1,1734659328,47,"target"
?/field
|2,1,1734659309,47,"field"
? \<target_levitating_field\>
|2,1,1734659299,,"\\<target_levitating_field\\>"
?/setpoin
|2,1,1734659289,47,"setpoin"
?/cali
|2,1,1734659188,47,"cali"
?/calibr
|2,1,1734315141,47,"calibr"
? \<sensor_diff\>
|2,1,1734240981,,"\\<sensor_diff\\>"
?/hyster
|2,1,1734239358,47,"hyster"
?/False:
|2,1,1734238039,47,"False:"
?/hys
|2,1,1734237953,47,"hys"
?/hsy
|2,1,1734237951,47,"hsy"
?/hyst
|2,1,1734237234,47,"hyst"
?/0005
|2,1,1734236426,47,"0005"
?/PID
|2,1,1734230457,47,"PID"
? \<chan0\>
|2,1,1734229774,,"\\<chan0\\>"
?/top
|2,1,1734229762,47,"top"
? \<calibrated_top_value\>
|2,1,1734229702,,"\\<calibrated_top_value\\>"
?/bottom_v
|2,1,1734229641,47,"bottom_v"
? \<chan1\>
|2,1,1734229606,,"\\<chan1\\>"
?/chan2
|2,1,1734229581,47,"chan2"
? \<raw_top_value\>
|2,1,1734229547,,"\\<raw_top_value\\>"
?/levi
|2,1,1734229105,47,"levi"
? \<pid\>
|2,1,1733724873,,"\\<pid\\>"
?/target_
|2,1,1733721465,47,"target_"
?/7
|2,1,1733720434,47,"7"
?/1500
|2,1,1733720223,47,"1500"
?/chan0
|2,1,1733706764,47,"chan0"
? chan2
|2,1,1733706761,,"chan2"
?/Ana
|2,1,1733706294,47,"Ana"
?/setpo
|2,1,1733690355,47,"setpo"
?/erro
|2,1,1733690102,47,"erro"
?/Defin
|2,1,1733689934,47,"Defin"
?/77
|2,1,1733689346,47,"77"
?/sleep
|2,1,1733688041,47,"sleep"
?/72
|2,1,1733688000,47,"72"
? \<voltage\>
|2,1,1733686745,,"\\<voltage\\>"
?/volta
|2,1,1733686738,47,"volta"
?/hard_on
|2,1,1733639654,47,"hard_on"
? \<target_sensor_diff\>
|2,1,1733639362,,"\\<target_sensor_diff\\>"
?/sensor_di
|2,1,1733638705,47,"sensor_di"
?/turn_
|2,1,1733638191,47,"turn_"
?/Kp
|2,1,1733638183,47,"Kp"
?/turn_i
|2,1,1733638069,47,"turn_i"
?/turn_on
|2,1,1733637935,47,"turn_on"
?/Ki
|2,1,1733637915,47,"Ki"
?/thresh
|2,1,1733637323,47,"thresh"
?/log_n
|2,1,1733636490,47,"log_n"
?/pressed
|2,1,1733635832,47,"pressed"
? sensor_value
|2,1,1733635518,,"sensor_value"
? Sensor Value
|2,1,1733635508,,"Sensor Value"
?/sensor_value
|2,1,1733635466,47,"sensor_value"
?/sensor_val
|2,1,1733635452,47,"sensor_val"
?/chan
|2,1,1732929000,47,"chan"
?/target_vol
|2,1,1732924002,47,"target_vol"
? \<spi\>
|2,1,1732914780,,"\\<spi\\>"
? 2f
|2,1,1732914711,,"2f"
?/99
|2,1,1732777023,47,"99"
? \<AnalogIn\>
|2,1,1732773309,,"\\<AnalogIn\\>"
? \<MCP\>
|2,1,1732773304,,"\\<MCP\\>"
? \<board\>
|2,1,1732773296,,"\\<board\\>"
? \<digitalio\>
|2,1,1732773294,,"\\<digitalio\\>"
? \<busio\>
|2,1,1732773292,,"\\<busio\\>"
? \<os\>
|2,1,1732773288,,"\\<os\\>"
? \<last_read\>
|2,1,1732773180,,"\\<last_read\\>"
? \<remap_range\>
|2,1,1732773129,,"\\<remap_range\\>"
?/23
|2,1,1732772583,47,"23"
? \<tolerance\>
|2,1,1732770139,,"\\<tolerance\\>"
? \<agent1_speed\>
|2,1,1730527745,,"\\<agent1_speed\\>"
?/rand
|2,1,1730527549,47,"rand"
?/ran
|2,1,1730527538,47,"ran"
?/random
|2,1,1730527518,47,"random"
?/spec
|2,1,1730260785,47,"spec"

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Debug Line History (newest to oldest):

# Registers:
"0	LINE	0
	    print(f'sensor_value0: {sensor_value0} delta0: {delta_0} '
|3,0,0,1,1,0,1734241167,"    print(f'sensor_value0: {sensor_value0} delta0: {delta_0} '"
"1	LINE	0
	import RPi.GPIO as GPIO
	import board
	import busio
	import digitalio
	import random
	import time
	import adafruit_mcp3xxx.mcp3008 as MCP
	from adafruit_mcp3xxx.analog_in import AnalogIn
	import csv
	
	# MCP
	spi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)
	cs = digitalio.DigitalInOut(board.D16)
	mcp = MCP.MCP3008(spi, cs)
	
	# Set up PWM
	GPIO.setmode(GPIO.BCM)
	magnet_pin = 4
	GPIO.setup(magnet_pin, GPIO.OUT)
	pwm_frequency = 5000
	pwm = GPIO.PWM(magnet_pin, pwm_frequency)
	pwm.start(0)  # start with 0% duty cycle (off)
	
	# Create an analog input channel on pin 0
	chan0 = AnalogIn(mcp, MCP.P0)
	chan1 = AnalogIn(mcp, MCP.P1)
	chan2 = AnalogIn(mcp, MCP.P2)
	
	# Open a CSV file for logging
	with open('hall_effect_log.csv', mode='w', newline='') as file:
	    writer = csv.writer(file)
	    # Write the header
	    writer.writerow(["Time", "Duty Cycle", "Sensor Value 0", "Delta 0", "Sensor Value 1", "Delta 1", "Sensor Value 2", "Delta 2"])
	
	    sensor_value0 = chan0.voltage
	    sensor_value1 = chan1.voltage
	    sensor_value2 = chan2.voltage
	
	    total_samples = 5000
	    duty_cycles = list(range(0, 101)) + list(range(100, -1, -1))  # 0 to 100 and back to 0
	    cycles = 4
	    points_per_cycle = total_samples // (len(duty_cycles) * cycles)
	
	    for cycle in range(cycles):
	        for duty in duty_cycles:
	            pwm.ChangeDutyCycle(duty)
	            for _ in range(points_per_cycle):
	                # Compute change in voltage from the previous iteration
	                delta_0 = round(sensor_value0 - chan0.voltage, 3)
	                delta_1 = round(sensor_value1 - chan1.voltage, 3)
|3,0,1,1,50,0,1734831577,"import RPi.GPIO as GPIO","import board","import busio","import digitalio","import random","import time","import adafruit_mcp3xxx.mcp3008 as MCP","from adafruit_mcp3xxx.analog_in import AnalogIn","import csv","","# MCP","spi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)","cs = digitalio.DigitalInOut(board.D16)","mcp = MCP.MCP3008(spi, cs)","","# Set up PWM","GPIO.setmode(GPIO.BCM)","magnet_pin = 4",>34
|<"GPIO.setup(magnet_pin, GPIO.OUT)","pwm_frequency = 5000","pwm = GPIO.PWM(magnet_pin, pwm_frequency)","pwm.start(0)  # start with 0% duty cycle (off)","","# Create an analog input channel on pin 0","chan0 = AnalogIn(mcp, MCP.P0)","chan1 = AnalogIn(mcp, MCP.P1)","chan2 = AnalogIn(mcp, MCP.P2)","","# Open a CSV file for logging","with open('hall_effect_log.csv', mode='w', newline='') as file:","    writer = csv.writer(file)","    # Write the header",>148
|<"    writer.writerow([\"Time\", \"Duty Cycle\", \"Sensor Value 0\", \"Delta 0\", \"Sensor Value 1\", \"Delta 1\", \"Sensor Value 2\", \"Delta 2\"])","","    sensor_value0 = chan0.voltage","    sensor_value1 = chan1.voltage","    sensor_value2 = chan2.voltage","","    total_samples = 5000","    duty_cycles = list(range(0, 101)) + list(range(100, -1, -1))  # 0 to 100 and back to 0","    cycles = 4","    points_per_cycle = total_samples // (len(duty_cycles) * cycles)","",>33
|<"    for cycle in range(cycles):","        for duty in duty_cycles:","            pwm.ChangeDutyCycle(duty)","            for _ in range(points_per_cycle):","                # Compute change in voltage from the previous iteration","                delta_0 = round(sensor_value0 - chan0.voltage, 3)","                delta_1 = round(sensor_value1 - chan1.voltage, 3)"
"2	LINE	0
	import RPi.GPIO as GPIO
	import busio
	import digitalio
	import board
	import adafruit_mcp3xxx.mcp3008 as MCP
	from adafruit_mcp3xxx.analog_in import AnalogIn
	import time
	
	def measure_voltages(channel, samples=200, delay=0.01):
	    readings = []
	    for _ in range(samples):
	        readings.append(channel.voltage)
	        time.sleep(delay)
	    return readings
	
	def check_stability(readings, threshold=0.01):
	    r = max(readings) - min(readings)
	    return r <= threshold, r
	
	def stable_average(readings):
	    return sum(readings) / len(readings)
	
	# Setup SPI and ADC
	spi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)
	cs = digitalio.DigitalInOut(board.D16)
	mcp = MCP.MCP3008(spi, cs)
	
	# Define Hall Effect sensors
	chan_top = AnalogIn(mcp, MCP.P0)    # Top sensor
	chan_bottom = AnalogIn(mcp, MCP.P1) # Bottom sensor
	
	# Setup GPIO for electromagnet
	GPIO.setmode(GPIO.BCM)
	magnet_pin = 4
	GPIO.setup(magnet_pin, GPIO.OUT)
	GPIO.output(magnet_pin, GPIO.LOW)  # start coil off
	
	print("Starting structured calibration...")
	time.sleep(5)  # Wait for system to stabilize
	
	num_calibration_samples = 300
	calibration_delay = 0.01
	stability_threshold = 0.01  # Adjust as needed
	
	# ---- Coil OFF Calibration ----
	print("Calibrating with coil OFF...")
	GPIO.output(magnet_pin, GPIO.LOW)
	time.sleep(2)
	
	top_readings_off = measure_voltages(chan_top, samples=num_calibration_samples, delay=calibration_delay)
|3,0,2,1,50,0,1734241638,"import RPi.GPIO as GPIO","import busio","import digitalio","import board","import adafruit_mcp3xxx.mcp3008 as MCP","from adafruit_mcp3xxx.analog_in import AnalogIn","import time","","def measure_voltages(channel, samples=200, delay=0.01):","    readings = []","    for _ in range(samples):","        readings.append(channel.voltage)","        time.sleep(delay)","    return readings","","def check_stability(readings, threshold=0.01):",>39
|<"    r = max(readings) - min(readings)","    return r <= threshold, r","","def stable_average(readings):","    return sum(readings) / len(readings)","","# Setup SPI and ADC","spi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)","cs = digitalio.DigitalInOut(board.D16)","mcp = MCP.MCP3008(spi, cs)","","# Define Hall Effect sensors","chan_top = AnalogIn(mcp, MCP.P0)    # Top sensor","chan_bottom = AnalogIn(mcp, MCP.P1) # Bottom sensor","","# Setup GPIO for electromagnet",>24
|<"GPIO.setmode(GPIO.BCM)","magnet_pin = 4","GPIO.setup(magnet_pin, GPIO.OUT)","GPIO.output(magnet_pin, GPIO.LOW)  # start coil off","","print(\"Starting structured calibration...\")","time.sleep(5)  # Wait for system to stabilize","","num_calibration_samples = 300","calibration_delay = 0.01","stability_threshold = 0.01  # Adjust as needed","","# ---- Coil OFF Calibration ----","print(\"Calibrating with coil OFF...\")","GPIO.output(magnet_pin, GPIO.LOW)","time.sleep(2)","",>105
|<"top_readings_off = measure_voltages(chan_top, samples=num_calibration_samples, delay=calibration_delay)"
"3	LINE	0
	    print(f'sensor_diff: {abs(sensor_diff):0.2f}\tprev-curr sensor_diff: {abs(prev_sensor_diff - sensor_diff):0.2f}')
|3,0,3,1,1,0,1734241021,"    print(f'sensor_diff: {abs(sensor_diff):0.2f}\\tprev-curr sensor_diff: {abs(prev_sensor_diff - sensor_diff):0.2f}')"
"4	LINE	0
	    #print(f'Sensor Value0: {sensor_value0:.3f}V\tSensor Value1: {sensor_value1:.3f}V\tstate: {magnet_pin.value}\tdelta0: {delta_0:.3f}\tdelta1: {delta_1:.3f}')
|3,0,4,1,1,0,1734241021,"    #print(f'Sensor Value0: {sensor_value0:.3f}V\\tSensor Value1: {sensor_value1:.3f}V\\tstate: {magnet_pin.value}\\tdelta0: {delta_0:.3f}\\tdelta1: {delta_1:.3f}')"
"5	LINE	0
	    sensor_diff = sensor_value0 - sensor_value1
|3,0,5,1,1,0,1734241016,"    sensor_diff = sensor_value0 - sensor_value1"
"6	LINE	0
	    prev_sensor_diff = sensor_diff
|3,0,6,1,1,0,1734241015,"    prev_sensor_diff = sensor_diff"
"7	LINE	0
	sensor_diff = sensor_value0 - sensor_value1
|3,0,7,1,1,0,1734240993,"sensor_diff = sensor_value0 - sensor_value1"
"8	LINE	0
	import RPi.GPIO as GPIO
	import busio
	import digitalio
	import board
	import adafruit_mcp3xxx.mcp3008 as MCP
	from adafruit_mcp3xxx.analog_in import AnalogIn
	import time
	
	def measure_average_voltage(channel, samples=200, delay=0.01):
	    readings = []
	    for _ in range(samples):
	        readings.append(channel.voltage)
	        time.sleep(delay)
	    return sum(readings) / len(readings)
	
	def add_reading_and_average(value, buffer, max_size=5):
	    """Add a new reading to the buffer and return the average of the last max_size readings."""
	    buffer.append(value)
	    if len(buffer) > max_size:
	        buffer.pop(0)
	    return sum(buffer) / len(buffer)
	
	# Setup SPI and ADC
	spi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)
	cs = digitalio.DigitalInOut(board.D16)
	mcp = MCP.MCP3008(spi, cs)
	
	# Define Hall Effect sensors
	chan_top = AnalogIn(mcp, MCP.P0)    # Top sensor
	chan_bottom = AnalogIn(mcp, MCP.P1) # Bottom sensor
	
	# Setup GPIO for electromagnet
	GPIO.setmode(GPIO.BCM)
	magnet_pin = 4
	GPIO.setup(magnet_pin, GPIO.OUT)
	GPIO.output(magnet_pin, GPIO.LOW)  # start coil off
	
	print("Starting structured calibration...")
	time.sleep(5)  # Wait for system to stabilize
	
	# ---- Coil OFF Calibration ----
	print("Calibrating with coil OFF...")
	GPIO.output(magnet_pin, GPIO.LOW)
	time.sleep(2)
	top_offset_off = measure_average_voltage(chan_top, samples=300, delay=0.01)
	bottom_offset_off = measure_average_voltage(chan_bottom, samples=300, delay=0.01)
	print(f"Coil OFF offsets: Top: {top_offset_off:.3f}, Bottom: {bottom_offset_off:.3f}")
	
	# ---- Coil ON Calibration ----
	print("Calibrating with coil ON...")
|3,0,8,1,50,0,1734238649,"import RPi.GPIO as GPIO","import busio","import digitalio","import board","import adafruit_mcp3xxx.mcp3008 as MCP","from adafruit_mcp3xxx.analog_in import AnalogIn","import time","","def measure_average_voltage(channel, samples=200, delay=0.01):","    readings = []","    for _ in range(samples):","        readings.append(channel.voltage)","        time.sleep(delay)","    return sum(readings) / len(readings)","",>57
|<"def add_reading_and_average(value, buffer, max_size=5):","    \"\"\"Add a new reading to the buffer and return the average of the last max_size readings.\"\"\"","    buffer.append(value)","    if len(buffer) > max_size:","        buffer.pop(0)","    return sum(buffer) / len(buffer)","","# Setup SPI and ADC","spi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)","cs = digitalio.DigitalInOut(board.D16)","mcp = MCP.MCP3008(spi, cs)","","# Define Hall Effect sensors",>50
|<"chan_top = AnalogIn(mcp, MCP.P0)    # Top sensor","chan_bottom = AnalogIn(mcp, MCP.P1) # Bottom sensor","","# Setup GPIO for electromagnet","GPIO.setmode(GPIO.BCM)","magnet_pin = 4","GPIO.setup(magnet_pin, GPIO.OUT)","GPIO.output(magnet_pin, GPIO.LOW)  # start coil off","","print(\"Starting structured calibration...\")","time.sleep(5)  # Wait for system to stabilize","","# ---- Coil OFF Calibration ----","print(\"Calibrating with coil OFF...\")","GPIO.output(magnet_pin, GPIO.LOW)",>15
|<"time.sleep(2)","top_offset_off = measure_average_voltage(chan_top, samples=300, delay=0.01)","bottom_offset_off = measure_average_voltage(chan_bottom, samples=300, delay=0.01)","print(f\"Coil OFF offsets: Top: {top_offset_off:.3f}, Bottom: {bottom_offset_off:.3f}\")","","# ---- Coil ON Calibration ----","print(\"Calibrating with coil ON...\")"
"9	LINE	0
	import RPi.GPIO as GPIO
	import busio
	import digitalio
	import board
	import adafruit_mcp3xxx.mcp3008 as MCP
	from adafruit_mcp3xxx.analog_in import AnalogIn
	import time
	
	def measure_average_voltage(channel, samples=200, delay=0.01):
	    readings = []
	    for _ in range(samples):
	        readings.append(channel.voltage)
	        time.sleep(delay)
	    return sum(readings) / len(readings)
	
	# Setup SPI and ADC
	spi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)
	cs = digitalio.DigitalInOut(board.D16)
	mcp = MCP.MCP3008(spi, cs)
	
	# Define Hall Effect sensors
	chan_top = AnalogIn(mcp, MCP.P0)    # Top sensor
	chan_bottom = AnalogIn(mcp, MCP.P1) # Bottom sensor
	
	# Setup GPIO for electromagnet
	GPIO.setmode(GPIO.BCM)
	magnet_pin = 4
	GPIO.setup(magnet_pin, GPIO.OUT)
	GPIO.output(magnet_pin, GPIO.LOW)  # start coil off
	
	print("Starting structured calibration...")
	time.sleep(5)  # Wait for system to stabilize
	
	# ---- Coil OFF Calibration ----
	print("Calibrating with coil OFF...")
	GPIO.output(magnet_pin, GPIO.LOW)
	time.sleep(2)
	top_offset_off = measure_average_voltage(chan_top, samples=300, delay=0.01)
	bottom_offset_off = measure_average_voltage(chan_bottom, samples=300, delay=0.01)
	print(f"Coil OFF offsets: Top: {top_offset_off:.3f}, Bottom: {bottom_offset_off:.3f}")
	
	# ---- Coil ON Calibration ----
	print("Calibrating with coil ON...")
	GPIO.output(magnet_pin, GPIO.HIGH)
	time.sleep(2)
	top_offset_on = measure_average_voltage(chan_top, samples=300, delay=0.01)
	bottom_offset_on = measure_average_voltage(chan_bottom, samples=300, delay=0.01)
	print(f"Coil ON offsets: Top: {top_offset_on:.3f}, Bottom: {bottom_offset_on:.3f}")
	
	# Turn coil off after calibration
|3,0,9,1,50,0,1734238400,"import RPi.GPIO as GPIO","import busio","import digitalio","import board","import adafruit_mcp3xxx.mcp3008 as MCP","from adafruit_mcp3xxx.analog_in import AnalogIn","import time","","def measure_average_voltage(channel, samples=200, delay=0.01):","    readings = []","    for _ in range(samples):","        readings.append(channel.voltage)","        time.sleep(delay)","    return sum(readings) / len(readings)","","# Setup SPI and ADC",>68
|<"spi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)","cs = digitalio.DigitalInOut(board.D16)","mcp = MCP.MCP3008(spi, cs)","","# Define Hall Effect sensors","chan_top = AnalogIn(mcp, MCP.P0)    # Top sensor","chan_bottom = AnalogIn(mcp, MCP.P1) # Bottom sensor","","# Setup GPIO for electromagnet","GPIO.setmode(GPIO.BCM)","magnet_pin = 4","GPIO.setup(magnet_pin, GPIO.OUT)","GPIO.output(magnet_pin, GPIO.LOW)  # start coil off","",>47
|<"print(\"Starting structured calibration...\")","time.sleep(5)  # Wait for system to stabilize","","# ---- Coil OFF Calibration ----","print(\"Calibrating with coil OFF...\")","GPIO.output(magnet_pin, GPIO.LOW)","time.sleep(2)","top_offset_off = measure_average_voltage(chan_top, samples=300, delay=0.01)","bottom_offset_off = measure_average_voltage(chan_bottom, samples=300, delay=0.01)","print(f\"Coil OFF offsets: Top: {top_offset_off:.3f}, Bottom: {bottom_offset_off:.3f}\")","",>33
|<"# ---- Coil ON Calibration ----","print(\"Calibrating with coil ON...\")","GPIO.output(magnet_pin, GPIO.HIGH)","time.sleep(2)","top_offset_on = measure_average_voltage(chan_top, samples=300, delay=0.01)","bottom_offset_on = measure_average_voltage(chan_bottom, samples=300, delay=0.01)","print(f\"Coil ON offsets: Top: {top_offset_on:.3f}, Bottom: {bottom_offset_on:.3f}\")","","# Turn coil off after calibration"
""-	CHAR	0
	0
|3,1,36,0,1,0,1734843931,"0"

# File marks:
'0  58  21  ~/duty_cycle_magnet.py
|4,48,58,21,1734844716,"~/duty_cycle_magnet.py"
'1  59  41  ~/duty_cycle_magnet.py
|4,49,59,41,1734843934,"~/duty_cycle_magnet.py"
'2  59  41  ~/duty_cycle_magnet.py
|4,50,59,41,1734843934,"~/duty_cycle_magnet.py"
'3  60  48  ~/duty_cycle_magnet.py
|4,51,60,48,1734843394,"~/duty_cycle_magnet.py"
'4  60  48  ~/duty_cycle_magnet.py
|4,52,60,48,1734843394,"~/duty_cycle_magnet.py"
'5  60  48  ~/duty_cycle_magnet.py
|4,53,60,48,1734843394,"~/duty_cycle_magnet.py"
'6  60  48  ~/duty_cycle_magnet.py
|4,54,60,48,1734843394,"~/duty_cycle_magnet.py"
'7  49  23  ~/duty_cycle_magnet.py
|4,55,49,23,1734843357,"~/duty_cycle_magnet.py"
'8  49  23  ~/duty_cycle_magnet.py
|4,56,49,23,1734843357,"~/duty_cycle_magnet.py"
'9  49  23  ~/duty_cycle_magnet.py
|4,57,49,23,1734843357,"~/duty_cycle_magnet.py"

# Jumplist (newest first):
-'  58  21  ~/duty_cycle_magnet.py
|4,39,58,21,1734844716,"~/duty_cycle_magnet.py"
-'  59  21  ~/duty_cycle_magnet.py
|4,39,59,21,1734844434,"~/duty_cycle_magnet.py"
-'  59  41  ~/duty_cycle_magnet.py
|4,39,59,41,1734843934,"~/duty_cycle_magnet.py"
-'  60  0  ~/duty_cycle_magnet.py
|4,39,60,0,1734843927,"~/duty_cycle_magnet.py"
-'  60  0  ~/duty_cycle_magnet.py
|4,39,60,0,1734843927,"~/duty_cycle_magnet.py"
-'  60  48  ~/duty_cycle_magnet.py
|4,39,60,48,1734843394,"~/duty_cycle_magnet.py"
-'  49  23  ~/duty_cycle_magnet.py
|4,39,49,23,1734843389,"~/duty_cycle_magnet.py"
-'  49  23  ~/duty_cycle_magnet.py
|4,39,49,23,1734843389,"~/duty_cycle_magnet.py"
-'  49  23  ~/duty_cycle_magnet.py
|4,39,49,23,1734843389,"~/duty_cycle_magnet.py"
-'  49  23  ~/duty_cycle_magnet.py
|4,39,49,23,1734843357,"~/duty_cycle_magnet.py"
-'  73  0  ~/duty_cycle_magnet.py
|4,39,73,0,1734843346,"~/duty_cycle_magnet.py"
-'  73  0  ~/duty_cycle_magnet.py
|4,39,73,0,1734843346,"~/duty_cycle_magnet.py"
-'  73  0  ~/duty_cycle_magnet.py
|4,39,73,0,1734843346,"~/duty_cycle_magnet.py"
-'  73  0  ~/duty_cycle_magnet.py
|4,39,73,0,1734843346,"~/duty_cycle_magnet.py"
-'  73  0  ~/duty_cycle_magnet.py
|4,39,73,0,1734831580,"~/duty_cycle_magnet.py"
-'  1  16  ~/duty_cycle_magnet.py
|4,39,1,16,1734831575,"~/duty_cycle_magnet.py"
-'  1  16  ~/duty_cycle_magnet.py
|4,39,1,16,1734831575,"~/duty_cycle_magnet.py"
-'  1  16  ~/duty_cycle_magnet.py
|4,39,1,16,1734831575,"~/duty_cycle_magnet.py"
-'  1  16  ~/duty_cycle_magnet.py
|4,39,1,16,1734831575,"~/duty_cycle_magnet.py"
-'  1  16  ~/duty_cycle_magnet.py
|4,39,1,16,1734831575,"~/duty_cycle_magnet.py"
-'  20  16  ~/duty_cycle_magnet.py
|4,39,20,16,1734827444,"~/duty_cycle_magnet.py"
-'  20  16  ~/duty_cycle_magnet.py
|4,39,20,16,1734827444,"~/duty_cycle_magnet.py"
-'  20  16  ~/duty_cycle_magnet.py
|4,39,20,16,1734827444,"~/duty_cycle_magnet.py"
-'  20  16  ~/duty_cycle_magnet.py
|4,39,20,16,1734827444,"~/duty_cycle_magnet.py"
-'  20  16  ~/duty_cycle_magnet.py
|4,39,20,16,1734827444,"~/duty_cycle_magnet.py"
-'  65  0  ~/duty_cycle_magnet.py
|4,39,65,0,1734827441,"~/duty_cycle_magnet.py"
-'  65  0  ~/duty_cycle_magnet.py
|4,39,65,0,1734827441,"~/duty_cycle_magnet.py"
-'  65  0  ~/duty_cycle_magnet.py
|4,39,65,0,1734827441,"~/duty_cycle_magnet.py"
-'  65  0  ~/duty_cycle_magnet.py
|4,39,65,0,1734827441,"~/duty_cycle_magnet.py"
-'  65  0  ~/duty_cycle_magnet.py
|4,39,65,0,1734827441,"~/duty_cycle_magnet.py"
-'  66  30  ~/duty_cycle_magnet.py
|4,39,66,30,1734827437,"~/duty_cycle_magnet.py"
-'  66  30  ~/duty_cycle_magnet.py
|4,39,66,30,1734827437,"~/duty_cycle_magnet.py"
-'  66  30  ~/duty_cycle_magnet.py
|4,39,66,30,1734827437,"~/duty_cycle_magnet.py"
-'  66  30  ~/duty_cycle_magnet.py
|4,39,66,30,1734827437,"~/duty_cycle_magnet.py"
-'  66  30  ~/duty_cycle_magnet.py
|4,39,66,30,1734827437,"~/duty_cycle_magnet.py"
-'  66  30  ~/duty_cycle_magnet.py
|4,39,66,30,1734827121,"~/duty_cycle_magnet.py"
-'  40  9  ~/duty_cycle_magnet.py
|4,39,40,9,1734827103,"~/duty_cycle_magnet.py"
-'  22  35  ~/duty_cycle_magnet.py
|4,39,22,35,1734827103,"~/duty_cycle_magnet.py"
-'  12  0  ~/duty_cycle_magnet.py
|4,39,12,0,1734827103,"~/duty_cycle_magnet.py"
-'  40  9  ~/duty_cycle_magnet.py
|4,39,40,9,1734827103,"~/duty_cycle_magnet.py"
-'  22  35  ~/duty_cycle_magnet.py
|4,39,22,35,1734827103,"~/duty_cycle_magnet.py"
-'  12  0  ~/duty_cycle_magnet.py
|4,39,12,0,1734827103,"~/duty_cycle_magnet.py"
-'  40  9  ~/duty_cycle_magnet.py
|4,39,40,9,1734827103,"~/duty_cycle_magnet.py"
-'  22  35  ~/duty_cycle_magnet.py
|4,39,22,35,1734827103,"~/duty_cycle_magnet.py"
-'  12  0  ~/duty_cycle_magnet.py
|4,39,12,0,1734827103,"~/duty_cycle_magnet.py"
-'  40  9  ~/duty_cycle_magnet.py
|4,39,40,9,1734827103,"~/duty_cycle_magnet.py"
-'  22  35  ~/duty_cycle_magnet.py
|4,39,22,35,1734827103,"~/duty_cycle_magnet.py"
-'  12  0  ~/duty_cycle_magnet.py
|4,39,12,0,1734827103,"~/duty_cycle_magnet.py"
-'  40  9  ~/duty_cycle_magnet.py
|4,39,40,9,1734827103,"~/duty_cycle_magnet.py"
-'  22  35  ~/duty_cycle_magnet.py
|4,39,22,35,1734827103,"~/duty_cycle_magnet.py"
-'  12  0  ~/duty_cycle_magnet.py
|4,39,12,0,1734827103,"~/duty_cycle_magnet.py"
-'  40  9  ~/duty_cycle_magnet.py
|4,39,40,9,1734827103,"~/duty_cycle_magnet.py"
-'  22  35  ~/duty_cycle_magnet.py
|4,39,22,35,1734827103,"~/duty_cycle_magnet.py"
-'  12  0  ~/duty_cycle_magnet.py
|4,39,12,0,1734827103,"~/duty_cycle_magnet.py"
-'  1  0  ~/duty_cycle_magnet.py
|4,39,1,0,1734827099,"~/duty_cycle_magnet.py"
-'  1  0  ~/duty_cycle_magnet.py
|4,39,1,0,1734827099,"~/duty_cycle_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"
-'  128  30  ~/control_magnet.py
|4,39,128,30,1734659335,"~/control_magnet.py"

# History of marks within files (newest to oldest):

> ~/duty_cycle_magnet.py
	*	1734844715	0
	"	58	21
	^	60	49
	.	59	41
	+	1	13
	+	1	20
	+	1	30
	+	1	10
	+	72	14
	+	60	47
	+	52	27
	+	49	23
	+	60	48
	+	59	41

> ~/control_magnet.py
	*	1734659334	0
	"	128	30
	^	128	31
	.	128	30
	+	1	23
	+	1	28
	+	1	11
	+	1	30
	+	1	11
	+	1	14
	+	1	29
	+	1	20
	+	1	15
	+	1	29
	+	1	20
	+	1	11
	+	1	30
	+	1	9
	+	1	8
	+	1	0
	+	1	8
	+	1	41
	+	1	8
	+	1	28
	+	1	0
	+	1	8
	+	1	56
	+	1	28
	+	1	11
	+	1	28
	+	1	48
	+	1	64
	+	1	0
	+	1	8
	+	1	60
	+	1	0
	+	1	43
	+	1	24
	+	1	28
	+	1	35
	+	1	58
	+	1	51
	+	1	0
	+	1	69
	+	1	67
	+	1	0
	+	1	10
	+	1	11
	+	1	76
	+	1	77
	+	1	137
	+	1	0
	+	1	126
	+	1	144
	+	1	132
	+	1	147
	+	1	131
	+	1	0
	+	1	48
	+	1	69
	+	1	67
	+	1	29
	+	1	18
	+	1	23
	+	1	18
	+	1	29
	+	1	16
	+	1	23
	+	1	18
	+	1	22
	+	1	30
	+	1	23
	+	1	18
	+	1	29
	+	1	22
	+	1	23
	+	1	18
	+	1	16
	+	1	29
	+	1	0
	+	1	30
	+	1	16
	+	1	23
	+	1	18
	+	1	23
	+	1	18
	+	1	23
	+	1	28
	+	1	23
	+	181	18
	+	151	59
	+	113	26
	+	114	16
	+	176	23
	+	157	29
	+	160	28
	+	151	65
	+	48	11
	+	113	30
	+	164	26
	+	113	30
	+	114	17
	+	65	24
	+	128	30

> ~/flip_magnet_onoff.py
	*	1734658911	0
	"	54	16
	^	54	17
	.	54	16
	+	34	30
	+	45	4
	+	45	27
	+	45	7
	+	45	8
	+	45	16
	+	45	50
	+	45	0
	+	33	0
	+	45	0
	+	45	4
	+	53	0
	+	53	8
	+	53	0
	+	53	51
	+	54	17
	+	33	8
	+	23	27
	+	33	0
	+	34	16
	+	34	0
	+	46	0
	+	53	28
	+	53	80
	+	54	18
	+	33	0
	+	53	4
	+	53	0
	+	54	17
	+	38	18
	+	54	18
	+	54	17
	+	41	42
	+	42	34
	+	53	155
	+	25	0
	+	26	0
	+	53	135
	+	38	19
	+	54	18
	+	53	4
	+	38	4
	+	53	4
	+	54	19
	+	10	12
	+	54	50
	+	53	4
	+	38	4
	+	53	4
	+	54	17
	+	45	46
	+	28	0
	+	45	0
	+	53	0
	+	53	38
	+	53	33
	+	53	106
	+	53	4
	+	53	112
	+	24	27
	+	27	20
	+	28	0
	+	43	34
	+	49	16
	+	53	0
	+	50	30
	+	47	33
	+	50	61
	+	51	0
	+	52	0
	+	51	4
	+	52	4
	+	51	9
	+	52	9
	+	51	24
	+	52	25
	+	51	40
	+	52	40
	+	51	48
	+	52	48
	+	51	58
	+	52	62
	+	41	52
	+	42	52
	+	43	52
	+	49	24
	+	48	0
	+	47	42
	+	48	42
	+	49	42
	+	50	61
	+	51	61
	+	52	61
	+	50	43
	+	51	43
	+	52	43
	+	54	16

> ~/control_magnet
	*	1733639032	0
	"	1	0

> ~/new_magnet.py
	*	1732914757	0
	"	43	0
	.	23	0
	+	1	18
	+	1	0
	+	1	12
	+	1	21
	+	1	19
	+	1	21
	+	1	22
	+	1	21
	+	1	22
	+	1	23
	+	1	0
	+	1	136
	+	1	0
	+	1	105
	+	1	23
	+	59	0
	+	11	20
	+	43	0
	+	55	0
	+	23	0

> ~/mcp3xxx.py
	*	1732777824	0
	"	43	0
	^	43	0
	.	43	0
	+	1	19
	+	1	0
	+	1	36
	+	1	0
	+	1	25
	+	1	17
	+	1	0
	+	1	36
	+	1	0
	+	1	70
	+	1	0
	+	1	66
	+	1	20
	+	1	4
	+	1	66
	+	43	0

> ~/magnet.ipynb
	*	1732420496	0
	"	1	0

> ~/magnet.
	*	1732420466	0
	"	1	0

> ~/magnet.py
	*	1732420349	0
	"	22	0
	^	22	0
	.	22	0
	+	21	18
	+	22	0

> ~/rainbow_mirror.py
	*	1730527969	0
	"	5	0
	^	121	0
	.	120	24
	+	212	64
	+	212	0
	+	12	14
	+	51	24
	+	208	0
	+	52	0
	+	53	12
	+	123	0
	+	53	0
	+	124	11
	+	4	10
	+	69	24
	+	70	24
	+	70	0
	+	124	64
	+	125	0
	+	124	21
	+	124	0
	+	70	24
	+	70	0
	+	5	12
	+	124	24
	+	70	37
	+	70	43
	+	70	0
	+	70	3
	+	70	7
	+	70	23
	+	70	12
	+	122	0
	+	124	21
	+	122	0
	+	70	24
	+	120	24

> ~/testmirror.py
	*	1730260977	0
	"	331	10
	^	331	11
	.	331	10
	+	343	22
	+	342	69
	+	343	0
	+	342	22
	+	309	23
	+	195	0
	+	315	30
	+	317	31
	+	327	19
	+	168	23
	+	309	0
	+	342	25
	+	318	25
	+	326	8
	+	327	21
	+	339	62
	+	342	32
	+	339	29
	+	327	21
	+	195	24
	+	314	29
	+	322	11
	+	195	0
	+	308	4
	+	322	13
	+	323	11
	+	322	15
	+	217	0
	+	313	27
	+	321	13
	+	337	0
	+	336	0
	+	335	8
	+	337	0
	+	339	96
	+	344	0
	+	263	0
	+	313	29
	+	321	14
	+	330	10
	+	321	14
	+	313	0
	+	321	0
	+	330	0
	+	263	6
	+	263	24
	+	263	0
	+	313	0
	+	312	8
	+	310	36
	+	320	15
	+	330	10
	+	263	35
	+	308	0
	+	318	20
	+	263	24
	+	308	0
	+	263	0
	+	312	0
	+	316	0
	+	320	0
	+	324	8
	+	311	30
	+	319	12
	+	329	10
	+	328	0
	+	263	0
	+	261	23
	+	263	0
	+	262	0
	+	220	4
	+	330	10
	+	331	10
